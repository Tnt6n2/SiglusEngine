■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■マニュアルの replace と define の違い

	言いたい事は、以下の事だと思いますが、今の説明では要点がわかり辛いです。

	◆簡単に言えば、
		define  は置換処理を繰り返すので無限ループになる場合がある。
		replace は１回しか置換処理しないので多重展開できない。

	◆基本的には define を使い、無限ループになる場合のみ replace を使えば良いです。

	◆例１：無限ループになる

		//--------------------------------------------------------------------------------
		#define		文字列		≪文字列≫		// 文字列→≪文字列≫

			これは文字列です。
			↓
			これは≪文字列≫です。
			↓
			これは≪≪文字列≫≫です。
			↓
			これは≪≪≪文字列≫≫≫です。
			↓
			これは≪≪≪≪文字列≫≫≫≫です。
			↓
			これは≪≪≪≪≪文字列≫≫≫≫≫です。
			↓
			※無限ループしますのでＥＲＲになります。

		//--------------------------------------------------------------------------------
		#replace	文字列		≪文字列≫		// 文字列→≪文字列≫

			これは文字列です。
			↓
			これは≪文字列≫です。

	◆例２：replace は多重展開できない

		//--------------------------------------------------------------------------------
		#define		@POS_X			A[0]					// Ｘ座標
		#define		@POS_Y			A[1]					// Ｙ座標
		#replace	@POS_INIT		@POS_X=0  @POS_Y=0		// 座標初期化

			@POS_INIT
			↓
			@POS_X=0  @POS_Y=0		←これ以上置換されないので、コンパイルＥＲＲになります。

		//--------------------------------------------------------------------------------
		#define		@POS_X			A[0]					// Ｘ座標
		#define		@POS_Y			A[1]					// Ｙ座標
		#define		@POS_INIT		@POS_X=0  @POS_Y=0		// 座標初期化

			@POS_INIT
			↓
			@POS_X=0  @POS_Y=0		←多重展開します。
			↓
			A[0]=0  A[1]=0

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■配列変数の確保（リサイズ）

	配列変数ですが、定義時に確保数を指定できない為、$xxxx.resize(100) のように処理しなければなりません。
	しかし、確保した後、RETURNMENU を処理すると開放されてしまった…動作的にはそれで良いと思いますけど…

	スタートシーンで確保してメニューシーンに RETURNMENU で行くと、当然開放されちゃったわけですね。

	配列変数の定義時に確保できるように強く希望です。

